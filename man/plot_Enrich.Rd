% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plots.R
\name{plot_Enrich}
\alias{plot_Enrich}
\alias{plot_Enrich,RegenrichSet-method}
\title{Plot results of FET/GSEA enrichment analysis}
\usage{
plot_Enrich(object, ...)

\S4method{plot_Enrich}{RegenrichSet}(
  object,
  showCategory = 20,
  reg = NULL,
  regDescription = data.frame(reg = results_enrich(object)@allResult[, 1], Description =
    results_enrich(object)@allResult[, 1]),
  font.size = 12
)
}
\arguments{
\item{object}{a \code{RegenrichSet} object.}

\item{...}{additional arguments.}

\item{showCategory}{the number of regulator to plot.}

\item{reg}{The regulator to plot. This only works when the
GSEA enrichment method has used.}

\item{regDescription}{a two-column data frame, in which
first column is the regulator ID (for
example ENSEMBL ID), and the second column is the description
of regulators (for example gene
name). Default is a data frame, in which the regulator in the
network were repeated in the
two columns.}

\item{font.size}{font size of axis labels and axis tick mark
labels, default is 12.}
}
\value{
a ggplot object of plotting FET or GSEA enrichment result.
}
\description{
Plot FET/GSEA enrichment results. If the FET method is applied,
the top `showCategory` regulator will be plotted.
If the GSEA method is applied, the GSEA graph of regulator `reg`
will be plotted.
}
\examples{
# library(RegEnrich)
# Initializing a "RegenrichSet" object
data = log2(Lyme_GSE63085$FPKM + 1)
x = apply(data, 1, sd)
pData = Lyme_GSE63085$sampleInfo
data1 = data[seq_len(2000), ]

pData$week = as.factor(pData$week)
pData$patientID = as.factor(sub("(\\\\d+)-(\\\\d+)", "\\\\1_\\\\2",
                            pData$patientID))

design = model.matrix(~0 + patientID + week, data = pData)
object = RegenrichSet(expr = data1,
                      pData = pData,
                      method = "limma", minMeanExpr = 0,
                      design = design,
                      contrast = c(rep(0, ncol(design) - 1), 1),
                      networkConstruction = "COEN",
                      enrichTest = "FET")

# Differential expression analysis
object = regenrich_diffExpr(object)
# Network inference using "COEN" method
object = regenrich_network(object)
# Enrichment analysis by Fisher's exact test (FET)
object = regenrich_enrich(object)
# plot
plot_Enrich(object)

# Enrichment analysis by Fisher's exact test (FET)
object = regenrich_enrich(object, enrichTest = "GSEA")
# plot
plot_Enrich(object)

}
